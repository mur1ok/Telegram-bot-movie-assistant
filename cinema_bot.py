import os
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ParseMode
from parser import RequestParser
from databse import DataBaseHandler

bot = Bot(token=os.environ['BOT_TOKEN'])
dp = Dispatcher(bot)

db = DataBaseHandler("tgbot_stats.db")
parser = RequestParser()


async def send_formatted_message(row_user_request: str, message: types.Message) -> None:
    """
    Searches for information on a user request, generates a response text and sends it to a chat with the user.
    :param row_user_request:
    :param message:
    :return:
    """
    result = await parser.take_formatted_message(row_user_request, message.from_user.username, db)
    await message.answer(result, parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    await message.answer("–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å, —á—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å? üôÇ")


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message) -> None:
    await message.answer("–Ø –ø–æ–º–æ–≥–∞—é –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–µ —Ñ–∏–ª—å–º—ã –Ω–∞ –∫—É—á–µ —Ä–∞–∑–Ω—ã—Ö –ø–ª–æ—â–∞–¥–æ–∫,"
                         " –∞ —Ç–µ–±–µ —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—É—é —É–¥–æ–±–Ω—É—é.\n"
                         "–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/stats</b>, –∏ —è –ø–æ–∫–∞–∂—É –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã —è –ø—Ä–µ–¥–ª–∞–≥–∞–ª —Ç–µ–±–µ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É. "
                         "–ß—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ —É–¥–æ–±–Ω–æ, —è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –∏—Ö –ø–æ —á–∞—Å—Ç–æ—Ç–µ –ø–æ–∫–∞–∑–∞.\n"
                         "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã —Ç—ã —É–∂–µ –∏—Å–∫–∞–ª –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É <b>/history</b>, "
                         "–≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å –≤–µ—Å—å –¥–∏–∞–ª–æ–≥.", parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['history'])
async def send_history(message: types.Message) -> None:
    """
    Gets query statistics for a given user and sends it to the chat
    """
    hist: list[tuple[str]] = db.get_user_history(message.from_user.username)
    if not hist:
        await message.answer("<b>–ö–∞–∂–µ—Ç—Å—è —Ç—ã –µ—â–µ –Ω–∏—á–µ–≥–æ —É –º–µ–Ω—è –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–ª, –Ω–µ —Ç–∞–∫ –ª–∏? üòâ</b>",
                             parse_mode=ParseMode.HTML)
        return None
    result = "<b>–í–æ—Ç –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã —è –ø–æ–º–æ–≥–∞–ª —Ç–µ–±–µ –∏—Å–∫–∞—Ç—å:</b>\n"
    for i, film in enumerate(hist):
        result += f"{i + 1}) {film[0]}\n"
    await message.answer(result, parse_mode=ParseMode.HTML)


@dp.message_handler(commands=['stats'])
async def send_stats(message: types.Message) -> None:
    """
    Retrieves the impression statistics for the given user and sends them to the chat in descending sorted order
    """
    stats: list[tuple[str, int]] = db.get_user_stats(message.from_user.username)
    if not stats:
        await message.answer("<b>–ß—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, "
                             "—è –¥–æ–ª–∂–µ–Ω —Ç–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∏–ª—å–º üòâ</b>", parse_mode=ParseMode.HTML)
        return None
    stats.sort(key=(lambda x: x[1]), reverse=True)
    result = "<b>–í–æ—Ç –∫–∞–∫–∏–µ —Ñ–∏–ª—å–º—ã —è –ø—Ä–µ–¥–ª–∞–≥–∞–ª —Ç–µ–±–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b>\n"
    for i, (film, showing) in enumerate(stats):
        result += f"{i + 1}) {film} - {showing} —Ä–∞–∑(–∞)\n"
    await message.answer(result, parse_mode=ParseMode.HTML)


@dp.message_handler()
async def take_cinema_name(message: types.Message) -> None:
    await send_formatted_message(message.text, message)


if __name__ == '__main__':
    executor.start_polling(dp)
